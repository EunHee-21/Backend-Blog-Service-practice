spring boot 설치

	Chocolatey는 윈도우용 패키지 매니저로, 설치하려는 윈도우용 소프트웨어를 
	일일이 웹사이트에서 찾아서 설치할 필요 없이 간단하게 커맨드 만으로 
	윈도우용 소프트웨어를 설치 할 수 있게 해 줍니다.

	1)JDK란?	자바 코드의 번역과 실행을 담당하는 자바 개발도구

	2)IDE?	개발 생산성을 높여주는 도구들, 즉 이클립스나 인텔리j와 같은 프로그램.

	3)package name은 Group과 Artifact의 이름이 합쳐져서 만들어진다.
 

1차시(스프링 부트의 개념설명= 자바프로그램을 만들기 위한 노하후, 즉 레시피가 집약되있는 프로그램)


2차시(개발환경만들기)
	-스프링부트 개발환경을 만들어봄
	-jdk 설치연습 -> ide인 인텔리전트 설치 -> 모든 준비가 끝난다음 
	스프링부트 프로젝트를 만듦 -> 헬로 월드를 띄워 봄.
		-src/main/java/패키지네임어쩌구폴더/패키지이름Application ->실행
		-html파일 -> src/resources/static 안에 hello.html 파일을 생성해주고,
		<body>위 아래 사이에 <h1>헬로 월드!</h1>을 입력하였음.
	그 후 주소창에 localhost:8080/hello.html을 입력했더니, 내가 입력한 헬로 월드!가 출력됨.


3차시(웹 서비스의 동작원리)
	-헬로우 월드가 어떻게 출력되었을까? -> 웹서비스의 동작 원리를 알아야함.
	-웹서비스는 (클라이언트)와 (서버)의 요청과 응답으로 동작.
		클라이언트 : 서비스를 사용하는 프로그램 or 컴퓨터
		서버 : 서비스를 제공하는 프로그램 or 컴퓨터
			ex. 헬로 월드! 에서는, 브라우저 = 클라이언트, 스프링부트 = 서버의 역할을 담당했다.

	tomcat 이라는 게 8080이란 포트에서 실행이 됬다.
	-localhost : 주소(우리 집, 내컴퓨터의 주소) / 8080 : 포트번호(방) 
		이 스트링부트 프로젝트가 localhost의 8080방에서 수행.
	-hello.html 처럼 파일명을 직접 명시하면 어디서 찾는다? -> src/main/resources/static에서 찾는다~ (리소스, 스태틱)


4차시(뷰 템플릿과 MVC 패턴)
	네이버 로그인에서, 프로필 사진과 닉네임에 따라 수많은 홈페이지를 만들어줘야 할까?
	-답은 아니다. 개발자들은 view templates(뷰 템플릿)이라는 화면을 담당하는 기술을 만듦.
		웹 페이지를 하나의 '틀'로 만들고, 거기에 이름, 프로필사진과 같은 변수를 갈아끼우면 됌.
		따라서 틀이되는 페이지가 변수의 값에 따라서 수많은 페이지로 바뀔 수 있음.

	-화면을 담당하는 view templates (presentation)
	-컨트롤러와 모델이라는 두 동료가 있음. 
		컨트롤러 - 처리(Controller, logic)
		모델 - 데이터(Model, data)
	-이렇게 화면, 처리, 데이터 분야를 각 담당자 별로 나누는 기법을 MVC패턴이라고 함. (Model View Controller)

		컨트롤러 선언 @Controller
		응답 페이지 설정 : return "페이지명";		(ex. return"greetings";)	;중요!
		URL 요청 연결 @GetMapping 		(ex.@GetMapping("/hi")
	-서버재시작 -> 변경코드 반영
	-무엇을 의미? 클라이언트에게 localhost:8080/hi란 URL 요청이 들어오면, 서버는 greetings.mustache란
	파일을 찾아 보내준다.

		{{variable}} 뷰 페이지에 변수 삽입(머스태치 문법), 이때 파일은 greeting.mustache
			ex. <h1>{{username}}님, 반갑습니다!</h1>
		모델 받아오기를 파라미터에 추가, 이때 파일은 아티펙트.Appllication
			ex. (Model model) , model.addAttribute("username", "홍팍");	쉼표랑 ;중요!
	한마디로 컨트롤러 만들고 페이지를 리턴하는데 변수, 즉 템플릿 변수를 활용하기위해 모델을 파라미터에 넣고
	model.~홍팍");를 추가하더라~


5차시(MVC의 역할과 실행흐름)
		먼저 Appllication과 같은 공간에 Controller라는 패키지(폴더)를 생성하고, 거기에 자바스크립트
		파일을 만들어 줬어. 그 후 @Controller 라는 명령어를 통해 이게 컨트롤러다! 라고 선언을 해줬지.
		거기다 @GetMapping을 통해 /hi라는 추가 URL을 입력하면 이 페이지로 이동하게 설정했어.
		또한 return에서 만약 클라이언트에게 요청이온다! 라고하면 greetings라고 mustache파일을 주기로
		정했지.
				-요청은 컨트롤러가 받는다! 어떻게? 겟 메핑을 통해 받는다.
				
		그 후 우리는 리소스의 템플릿 폴더에 greetings.mustache라는 파일을 만들어줬어, doc 입력 후 Tab을 눌러
		기본 html코드를 생성해준 후 <body>들 사이에 <h1>{{username}}님, 반갑습니다!</h1>라는
		코드를 입력해줬지, 즉 머스태치는 보여줄 페이지, View에 해당해. username은 변수에 해당하지.
				-return값 = mustache = View = 보여줄 페이지!

		다시 Controller에 돌아와서, public String 메소드이름(Model model)이라는 모델을 설정했어.
		이 모델은 변수에 관련하는데, model.addAttribute("username(변수)", "변수값");이라는 코드를 통해
		username에 변수값이 들어가도록 하게 만들었어.
				-보여줄 페이지에서 사용할 변수는 model을 통해 등록하더라.

	정리 
		1) 역할 : Model 변수지정, View 보여줄 페이지, Controller 요청을 받음
		2) 실행흐름 : Controller의 @GetMapping이 URL의 요청을 받음. 
			return(보답)으로 mustache(View)를 전송해줌.
			이때 Controller에서 Model을 통해 변수를 지정해줌으로써, view에서 변수를 사용가능
	
6차시(뷰 템플릿과 레이아웃)
	뷰 템플릿과 레이아웃 -> 레이아웃을 설정하는 방법, 코드를 템플릿화 시키는 방법을 알아봤다.
	레이아웃 예제 사이트 : getbootstrap

	레이아웃은 Navigation 역할(사이트의 안내)을 하는 	header,
		  (사용자가 볼 핵심내용)이 있는		content
		  Information(사이트의 정보)이 있는		footer	로 나뉘게 된다. (샌드위치 구조)
						
	템플릿을 설정하는 방법 : templates 폴더 안에 layouts라는 Directory(폴더) 생성.
	header.mustache와 footer.mustache를 생성했다. 거기에 템플릿화할 코드를 각각 집어넣었다.

	템플릿을 불러오는 방법 : {{<layouts/header}}	< 요 꺾새 중요!!)

7차시(폼 데이터 주고 받기)
	우린 앞으로 	
			Create(쓰고
			Read(읽고
			Update(바꾸고
			Delete(삭제하는
	CRUD과정을 연습할 것임. 먼저 쓰는 법부터 진행. 그 시작을 위해 폼 데이터 주고받기를 훈련하자.

	폼 데이터란? html 요소인 폼 테그(ex.게시판 작성)에 담긴 데이터.
	폼 테그는 택배에 비유할 수 있음. 	where? (어디로 보낼지?)  how? (어떻게 보낼지?)를 적어야함.	
	적혀진대로 폼 데이터는 전송이 되고, 컨트롤러는 이를 객체에 담아 받는다.
	이때 폼 데이터를 받는 객체 = DTO
	
	게시글을 쓴다 = 사용자의 입력이 DB라는 데이터 창고에 저장되는 과정
		1. 템플릿 폴더에 articles라는 폴더를 만들고 new.mustache라는 View를 만듦.
		2. View 페이지에서 폼 태그를 생성해 데이터를 던질 수 있게 함.
			어디로 보낼지의 action과 어떻게 보낼지의 method의 조합으로 이루어짐
				<form ~ = 폼 태그, 
				여기에 action="/articles/create"와 method="post"를 추가했음
					action : 어디로? method : 어떻게?

		3. 이제 받아야 하니 Controller로 이동한다.
		Controller에 메소드를 추가한다 -> 메소드 : public Srtring 네임() { return""; }
			1)어떻게 받는다? Post방식으로 던지기로 했으니, @PostMapping으로 받아야함.
			2)어디로 받는다? 아까 보냈던 /articles/create로 받아야지~
		따라서 메소드 윗줄에 @PostMapping("/articles/create")를 쓴다.

		4. 던져진 폼 데이터는 DTO 객체(ArticleForm form, ()라고 하는 아티펙터)에 담겨진다.
		DTO를 만들자! com.example.firstproject(기본폴더)에 dto 패키지(폴더) 생성.
		java class 생성 = 폼 데이터를 받아올 그릇
			2개의 데이터를 던졌으니 2개의 필드가 있어야함.
			private String title;
			private String content;

	정리 : View페이지를 만듦 -> View페이지에서 폼 태그(action, method)를 통해 데이터를 던짐
		->Controller에서 @PostMapping의 URL주소로 받음 -> 던져진 폼 데이터는 
		public String 이름 () <- 괄호 내부인 DTO객체에 담겨짐.


8차시(데이터 생성 with JPA)
	이제는 Controller에 저장된 데이터를 DB로 옮길 차례.
	그러나 자바어를 DB는 이해하지 못하므로, Dto(담긴 데이터)를 DB가 이해하기 편한 Entity로 변환,
	이후 Repository(엔티티를 옮기는 일꾼)에게 Entity를 DB안에 저장하게 함!



9차시(DB 테이블과 SQL)


10차시(롬복과 리팩터링)